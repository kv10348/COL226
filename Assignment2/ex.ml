# 1 "ex.mll"
 
  exception Eof 
  let curr_line=ref 1
type token=       (*Here we are defining all the token which we are going to use*)
|FLOAT of float           (*token for float*)
|BINARY of string          (*token for Binary operators*)
|Left_brac                 (*token for [*)
|Right_brac                  (*token for ]*)
|Colon                       (*token for : *)
|Comma                       (*token for , *)
|Left_paren                    (*token for "(" *)
|Right_paren                 (*token for ")" *)
|Assignment                  (*token for := *)
|Termination                     (*token for ; *)
|INT of int                  (*token for Integer*)
|Exceptions                      (*token for invalid inputs*)
|Unary of string               (*token for Unary operator*)


# 22 "ex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\238\255\239\255\000\000\001\000\244\255\246\255\000\000\
    \248\255\249\255\250\255\251\255\046\000\058\000\070\000\085\000\
    \000\000\001\000\000\000\001\000\254\255\255\255\000\000\002\000\
    \253\255\241\255\012\000\242\255\000\000\000\000\003\000\000\000\
    \006\000\240\255\006\000\097\000\245\255\079\000\091\000\027\000\
    \033\000\092\000\043\000\045\000\053\000\059\000\075\000\083\000\
    \001\000\073\000\084\000\076\000\099\000\102\000\084\000\091\000\
    \086\000\094\000\089\000\100\000\090\000\101\000";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\016\000\016\000\255\255\255\255\008\000\
    \255\255\255\255\255\255\255\255\003\000\012\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\255\255\255\255\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
    \000\000\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\020\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \011\000\010\000\000\000\014\000\006\000\015\000\012\000\000\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\007\000\005\000\000\000\036\000\000\000\000\000\
    \000\000\019\000\029\000\004\000\016\000\023\000\024\000\025\000\
    \025\000\034\000\030\000\000\000\032\000\017\000\028\000\051\000\
    \037\000\025\000\003\000\018\000\024\000\026\000\031\000\022\000\
    \033\000\027\000\024\000\009\000\024\000\008\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\040\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\012\000\027\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \035\000\048\000\047\000\012\000\045\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\012\000\
    \046\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\038\000\042\000\049\000\044\000\027\000\
    \027\000\033\000\033\000\052\000\039\000\050\000\055\000\060\000\
    \041\000\059\000\056\000\057\000\058\000\027\000\043\000\061\000\
    \053\000\027\000\033\000\025\000\000\000\000\000\054\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\007\000\255\255\255\255\
    \255\255\000\000\017\000\000\000\000\000\019\000\023\000\022\000\
    \048\000\016\000\017\000\255\255\031\000\000\000\026\000\003\000\
    \004\000\030\000\000\000\000\000\028\000\018\000\017\000\019\000\
    \029\000\026\000\032\000\000\000\034\000\000\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \013\000\039\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\014\000\040\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \015\000\042\000\043\000\015\000\044\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\035\000\
    \045\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\037\000\038\000\041\000\038\000\046\000\
    \047\000\049\000\050\000\051\000\037\000\041\000\052\000\053\000\
    \038\000\054\000\055\000\056\000\057\000\058\000\038\000\053\000\
    \052\000\059\000\060\000\061\000\255\255\255\255\052\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 25 "ex.mll"
                                          (token lexbuf)
# 164 "ex.ml"

  | 1 ->
# 26 "ex.mll"
                                        (incr curr_line;token lexbuf)
# 169 "ex.ml"

  | 2 ->
let
# 27 "ex.mll"
                                                    lxm
# 175 "ex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 27 "ex.mll"
                                                        (BINARY(lxm))
# 179 "ex.ml"

  | 3 ->
let
# 28 "ex.mll"
                                           lxm
# 185 "ex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 28 "ex.mll"
                                               (FLOAT(float_of_string lxm))
# 189 "ex.ml"

  | 4 ->
# 29 "ex.mll"
                                        (Left_paren)
# 194 "ex.ml"

  | 5 ->
# 30 "ex.mll"
                                        (Right_paren)
# 199 "ex.ml"

  | 6 ->
# 31 "ex.mll"
                                        (Left_brac)
# 204 "ex.ml"

  | 7 ->
# 32 "ex.mll"
                                        (Right_brac)
# 209 "ex.ml"

  | 8 ->
# 33 "ex.mll"
                                        (Colon)
# 214 "ex.ml"

  | 9 ->
# 34 "ex.mll"
                                        (Comma)
# 219 "ex.ml"

  | 10 ->
# 35 "ex.mll"
                                        (Assignment)
# 224 "ex.ml"

  | 11 ->
# 36 "ex.mll"
                                        (Termination)
# 229 "ex.ml"

  | 12 ->
let
# 37 "ex.mll"
                                    lxm
# 235 "ex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 37 "ex.mll"
                                        (INT(int_of_string lxm))
# 239 "ex.ml"

  | 13 ->
let
# 38 "ex.mll"
                                                               lxm
# 245 "ex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 38 "ex.mll"
                                                                   (Unary(lxm))
# 249 "ex.ml"

  | 14 ->
let
# 39 "ex.mll"
                                                               lxm
# 255 "ex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 39 "ex.mll"
                                                                   (Unary(lxm))
# 259 "ex.ml"

  | 15 ->
let
# 40 "ex.mll"
                                                               lxm
# 265 "ex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 40 "ex.mll"
                                                                   (Unary(lxm))
# 269 "ex.ml"

  | 16 ->
# 41 "ex.mll"
                                        (Exceptions)
# 274 "ex.ml"

  | 17 ->
# 42 "ex.mll"
                                       ( raise Eof )
# 279 "ex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

# 43 "ex.mll"
 
let main () =begin
try
let filename=Sys.argv.(1) in                                      (*reading the txt file *)
let  file_handle=open_in filename in 
let lexbuf = Lexing.from_channel file_handle in
while true do
    let result= token lexbuf in 
    match result with
    |Left_paren -> Printf.printf"Left_paren \n"
    |Right_paren -> Printf.printf"Right_paren \n"
    |Left_brac -> Printf.printf"Left_brac \n"
    |Right_brac -> Printf.printf"Right_brac \n"
    |Comma -> Printf.printf"Comma \n"
    |Colon ->  Printf.printf"Colon \n"
    |Assignment-> Printf.printf"Assignment \n"
    |INT(y)-> Printf.printf"INT %d\n" y
    |Termination->Printf.printf"Semicolon\n"
    |FLOAT(y)-> Printf.printf"FLOAT %f\n" y
    |BINARY(y)-> Printf.printf"BINARY_OPERATOR %s\n" y
    |Exceptions-> Printf.printf "Invalid_token \n"
    |Unary(y)-> Printf.printf "Unary %s\n" y
    done 
with Eof -> exit 0
end;;
main();;


# 315 "ex.ml"
